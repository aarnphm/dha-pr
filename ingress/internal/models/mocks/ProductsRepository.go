// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/aarnphm/dha-pr/ingress/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductsRepository is an autogenerated mock type for the ProductsRepository type
type ProductsRepository struct {
	mock.Mock
}

// FetchAll provides a mock function with given fields: ctx
func (_m *ProductsRepository) FetchAll(ctx context.Context) ([]models.Products, error) {
	ret := _m.Called(ctx)

	var r0 []models.Products
	if rf, ok := ret.Get(0).(func(context.Context) []models.Products); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ProductsRepository) GetByID(ctx context.Context, id int) ([]models.Products, error) {
	ret := _m.Called(ctx, id)

	var r0 []models.Products
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Products); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
