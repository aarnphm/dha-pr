{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "establishes comms with database to pass data to a downstream server for inference",
    "title": "Ingress Server",
    "contact": {
      "name": "Aaron Pham",
      "email": "aaronpham0103@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/aarnphm/dha-ps/blob/master/LICENSE"
    },
    "version": "0.0.1-dev"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/api/v1/attributes/": {
      "post": {
        "description": "Will updates all obsolete values existed on Mongo",
        "consumes": [
          "application/json",
          "Scheme:",
          "http"
        ],
        "tags": [
          "attributes"
        ],
        "summary": "List all attributes from table and sends downstream to filter order of importance",
        "operationId": "attrsList",
        "responses": {
          "200": {
            "$ref": "#/responses/attributesResponse"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/products/": {
      "post": {
        "description": "Null SQL Values will be handle downstream via processing.null_handler",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "Scheme:",
          "http"
        ],
        "tags": [
          "products"
        ],
        "summary": "List all products info from table and sends downstream to generate corpus",
        "operationId": "productsList",
        "responses": {
          "200": {
            "$ref": "#/responses/productsResponse"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/products/exported": {
      "get": {
        "description": "If errors occur likely there is postgres problem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/csv",
          "Scheme:",
          "http"
        ],
        "tags": [
          "products"
        ],
        "summary": "List all products info and export to csv file",
        "operationId": "productExported",
        "responses": {
          "200": {
            "$ref": "#/responses/productsResponse"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/products/{id}": {
      "post": {
        "description": "Null SQL Values will be handle downstream via processing.null_handler. If not found in existing corpus process and then added",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "Scheme:",
          "http"
        ],
        "tags": [
          "products"
        ],
        "summary": "Find a products in a database, send it downstream for inference, then save newly/updated for corpus via MongoDB",
        "operationId": "productList",
        "parameters": [
          {
            "type": "int",
            "description": "Product ID",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/productsResponse"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    }
  },
  "definitions": {
    "Attributes": {
      "type": "object",
      "title": "Attributes ...",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ismaterial": {
          "$ref": "#/definitions/NullBool"
        },
        "ispackingtrims": {
          "$ref": "#/definitions/NullBool"
        },
        "isproduct": {
          "$ref": "#/definitions/NullBool"
        },
        "issewingtrims": {
          "$ref": "#/definitions/NullBool"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/aarnphm/dha-ps/ingress/internal/models"
    },
    "AttributesResponse": {
      "description": "AttributesResponse model",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attributes"
          },
          "x-go-name": "Payload"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/aarnphm/dha-ps/ingress/api/handlers"
    },
    "NullBool": {
      "description": "NullBool implements the Scanner interface so\nit can be used as a scan destination, similar to NullString.",
      "type": "object",
      "title": "NullBool represents a bool that may be null.",
      "properties": {
        "Bool": {
          "type": "boolean"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "NullString": {
      "description": "var s NullString\nerr := db.QueryRow(\"SELECT name FROM foo WHERE id=?\", id).Scan(\u0026s)\n...\nif s.Valid {\nuse s.String\n} else {\nNULL value\n}",
      "type": "object",
      "title": "NullString represents a string that may be null.\nNullString implements the Scanner interface so\nit can be used as a scan destination:",
      "properties": {
        "String": {
          "type": "string"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "ProductResponse": {
      "description": "ProductResponse model",
      "type": "object",
      "properties": {
        "product": {
          "$ref": "#/definitions/Products"
        }
      },
      "x-go-package": "github.com/aarnphm/dha-ps/ingress/api/handlers"
    },
    "Products": {
      "type": "object",
      "title": "Products ...",
      "properties": {
        "attribute_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AttributeID"
        },
        "attribute_name": {
          "type": "string",
          "x-go-name": "AttributeName"
        },
        "attribute_value_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AttributeValueID"
        },
        "attribute_value_name": {
          "$ref": "#/definitions/NullString"
        },
        "product_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "product_name": {
          "type": "string",
          "x-go-name": "ProductName"
        }
      },
      "x-go-package": "github.com/aarnphm/dha-ps/ingress/internal/models"
    },
    "ProductsResponse": {
      "description": "ProductsResponse model",
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Products"
          },
          "x-go-name": "Payload"
        }
      },
      "x-go-package": "github.com/aarnphm/dha-ps/ingress/api/handlers"
    }
  },
  "responses": {
    "attributesResponse": {
      "description": "This will be the description of response body",
      "schema": {
        "$ref": "#/definitions/AttributesResponse"
      }
    },
    "genericError": {
      "description": "GenericError is the default error message that is generated",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "productResponse": {
      "description": "This will wrap ProductResponse",
      "schema": {
        "$ref": "#/definitions/ProductResponse"
      }
    },
    "productsResponse": {
      "description": "This will wrap ProductsResponse",
      "schema": {
        "$ref": "#/definitions/ProductsResponse"
      }
    },
    "tooManyRequestError": {
      "description": "TooManyRequestError handles HTTP 429"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}