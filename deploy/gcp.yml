### Ingress Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress
  name: ingress
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ingress
    spec:
      containers:
        - image: gcr.io/${GOOGLE_PROJECT_ID}/ingress:${CIRCLE_SHA1}
          name: ingress
          resources:
            requests:
              cpu: "250m"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
### Ingress Service
apiVersion: v1
kind: Service
metadata:
  name: ingress-service
  namespace: default
  labels:
    app: ingress
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  selector:
    app: ingress
  type: LoadBalancer

---
### NLP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  generation: 1
  labels:
    app: pr
  name: pr
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pr
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: pr
    spec:
      containers:
        - image: gcr.io/${GOOGLE_PROJECT_ID}/pr:${CIRCLE_SHA1}
          name: pr
          resources:
            requests:
              cpu: "250m"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
### NLP Service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pr
  name: pr-service
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
    - nodePort: 32610
      port: 30000
      protocol: TCP
      targetPort: 5000
  selector:
    app: pr
  sessionAffinity: None
  type: NodePort
